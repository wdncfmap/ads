CREATE OR REPLACE PROCEDURE REP.SP_PSYIELD_LOT_HIS_TBL_BATCH()
RETURNS INTEGER
LANGUAGE NZPLSQL AS
BEGIN_PROC
	DECLARE 
		pExistFlag boolean;
		pTableName varchar;
		pTableSchema varchar;
		pBatchLotHisView varchar;
	
	BEGIN
		BEGIN AUTOCOMMIT ON
		
			pTableName := 'PSYIELD_LOT_HIS_DENORM_TMP';
			pTableSchema := 'REP';
			
			pBatchLotHisView := 'SELECT 
									HIS_LOT.SITE_KEY AS SITE_KEY, 
									DIM_SITE.SITE_CODE AS SITE_CODE,
									HIS_LOT.LOT_ID AS LOT_ID, 
									HIS_LOT.LOT_KEY AS LOT_KEY, 
									
									CASE 
										WHEN (UPPER(HIS_LOT.LOT_ID) ~~ LIKE_ESCAPE(''TEST%''::"VARCHAR", ''\\''::"VARCHAR")) THEN ''Y'':: "VARCHAR" 
										ELSE ''N''::"VARCHAR"
										END AS IS_TEST_LOT_ID_FLAG, 
									
									HIS_LOT.OPERATION_KEY AS  M_LH_OPERATION_KEY, 
									HIS_LOT.OPERATION_NAME AS M_LH_OPERATION_NAME, 
									HIS_LOT.PROGRAM_KEY AS M_LH_PROGRAM_KEY,
									HIS_LOT.PROGRAM_NAME AS M_LH_PROGRAM_NAME,
									HIS_LOT.PRODUCT_KEY AS M_LH_PRODUCT_KEY,
									HIS_LOT.PRODUCT_NAME AS M_LH_PRODUCT_NAME,
									HIS_LOT.FACILITY_KEY M_LH_FACILITY_KEY, 
									HIS_LOT.FACILITY AS M_LH_FACILITY, 
									HIS_LOT.OPERATION_DATE_TIME AS M_LH_OPERATION_DATE, 
									DIM_DATE_W.PERIOD_YEAR AS M_LH_OPERATION_YEAR,
									DIM_DATE_Q.PERIOD_NUMBER AS M_LH_OPERATION_QUARTER, 
									DIM_DATE_W.PERIOD_NUMBER AS M_LH_OPERATION_WEEK,
									HIS_LOT.OWNER AS M_LH_OWNER, 
									HIS_LOT.QUANTITY_ONHAND AS M_LH_QUANTITY_ONHAND, 
								  	HIS_LOT.TRANSACTION_NAME AS M_LH_TRANSACTION_NAME, 
									HIS_LOT.DELETED_FLAG AS M_LH_DELETED_FLAG, 
									HIS_LOT.GROUP_FLAG AS M_LH_GROUP_FLAG, 
									HIS_LOT.OLD_QUANTITY_ONHAND AS M_LH_OLD_QUANTITY_ONHAND, 
									HIS_LOT.OLD_ROUTE_KEY AS M_LH_OLD_ROUTE_KEY, 
									HIS_LOT.OLD_ROUTE_NAME AS M_LH_OLD_ROUTE_NAME, 
									
									CASE 
										WHEN (HIS_LOT.OLD_OPERATION_NAME ~~ LIKE_ESCAPE(''9%''::"VARCHAR", ''\\''::"VARCHAR"))THEN "SUBSTRING"(HIS_LOT.OLD_ROUTE_NAME, (INSTR(HIS_LOT.OLD_ROUTE_NAME, ''_''::"VARCHAR", -1) + 1)) 
										ELSE NULL::"VARCHAR" 
										END AS M_LH_OLD_ROUTE_NAME_REWORK_SUFFIX, 
									
									HIS_LOT.OLD_PRODUCT_KEY AS M_LH_OLD_PRODUCT_KEY, 
									HIS_LOT.OLD_PRODUCT_NAME AS M_LH_OLD_PRODUCT_NAME, 
									HIS_LOT.OLD_PROGRAM_KEY AS M_LH_OLD_PROGRAM_KEY, 
									HIS_LOT.OLD_PROGRAM_NAME AS M_LH_OLD_PROGRAM_NAME, 
								
									CASE 
										WHEN ("SUBSTRING"(HIS_LOT.OLD_PROGRAM_NAME, (LENGTH(HIS_LOT.OLD_PROGRAM_NAME) - 1)) = ''PN''::"VARCHAR") THEN ''Y''::"VARCHAR" 
										ELSE ''N''::"VARCHAR" END AS M_LH_OLD_PROGRAM_WITH_PN_SUFFIX_FLAG,
										
									HIS_LOT.OLD_FACILITY_KEY M_LH_OLD_FACILITY_KEY, 
									HIS_LOT.OLD_FACILITY AS M_LH_OLD_FACILITY, 
									HIS_LOT.OLD_OPERATION_KEY AS M_LH_OLD_OPERATION_KEY, 
									HIS_LOT.OLD_OPERATION_NAME AS M_LH_OLD_OPERATION_NAME 
								FROM 													
									ADS.VIEW_HIS_LOT HIS_LOT 									 				
									LEFT JOIN ADS.VIEW_DIM_PRODUCT DIM_PRODUCT ON ((HIS_LOT.SITE_KEY = DIM_PRODUCT.SITE_KEY) AND (HIS_LOT.OLD_PRODUCT_KEY = DIM_PRODUCT.PRODUCT_KEY))
									LEFT JOIN ADS.VIEW_DIM_SITE DIM_SITE ON ( HIS_LOT.SITE_KEY = DIM_SITE.SITE_KEY)
									RIGHT JOIN REP.PSYIELD_RULE_YIELD_FACILITY RULE_FACILITY ON ( (RULE_FACILITY.SITE_KEY = HIS_LOT.SITE_KEY) AND (RULE_FACILITY.FACILITY = HIS_LOT.OLD_FACILITY) )
									RIGHT JOIN REP.PSYIELD_RULE_YIELD_TRANS RULE_TRANSACTION ON ( (RULE_TRANSACTION.RULE_NAME = HIS_LOT.TRANSACTION_NAME) AND (RULE_TRANSACTION.SITE_KEY = HIS_LOT.SITE_KEY) )
									LEFT JOIN ADS.VIEW_DIM_DATE DIM_DATE_W ON ( (HIS_LOT.OPERATION_DATE_TIME >= DIM_DATE_W.PERIOD_START_DATE_TIME)
																	AND (HIS_LOT.OPERATION_DATE_TIME <= DIM_DATE_W.PERIOD_END_DATE_TIME)
																	AND (HIS_LOT.SITE_KEY = DIM_DATE_W.SITE_KEY 
																	AND DIM_DATE_W.PERIOD_TYPE = ''W''::"VARCHAR" ))
									LEFT JOIN ADS.VIEW_DIM_DATE DIM_DATE_Q ON ( (HIS_LOT.OPERATION_DATE_TIME >= DIM_DATE_Q.PERIOD_START_DATE_TIME)
																	AND (HIS_LOT.OPERATION_DATE_TIME <= DIM_DATE_Q.PERIOD_END_DATE_TIME)
																	AND (HIS_LOT.SITE_KEY = DIM_DATE_Q.SITE_KEY 
																	AND DIM_DATE_Q.PERIOD_TYPE = ''Q''::"VARCHAR" ))
																	
									';
												
												
--			RAISE NOTICE 'pBatchLotHisView=%', pBatchLotHisView;
			
			SELECT CASE WHEN COUNT(1) >=1 THEN TRUE ELSE FALSE END INTO pExistFlag FROM _V_TABLE WHERE TABLENAME = pTableName AND SCHEMA = pTableSchema;
			
			IF pExistFlag  = TRUE THEN
				EXECUTE IMMEDIATE 'DROP TABLE ' || pTableSchema || '.'||pTableName;
				RAISE NOTICE 'Table %.% exist, deleted.', pTableSchema, pTableName;
			END IF;
			
			EXECUTE IMMEDIATE 'CREATE TABLE '|| pTableSchema || '.'||pTableName ||' AS SELECT * FROM ( ' || pBatchLotHisView || ' ) t DISTRIBUTE ON (SITE_CODE , M_LH_OLD_PROGRAM_NAME)';
			RAISE NOTICE 'create Table %.%, .', pTableSchema, pTableName;
			
		END;
	END;
END_PROC;

