CREATE OR REPLACE PROCEDURE REP.SP_PSYILED_DEFECT_DETAIL_TBL_BATCH()
RETURNS INTEGER
LANGUAGE NZPLSQL AS
BEGIN_PROC
	DECLARE 
		pExistFlag boolean;
		pTableName varchar;
		pTableSchema varchar;
		pBatchDefectDetailView varchar;
	
BEGIN
	BEGIN AUTOCOMMIT ON
		pTableName := 'PSYIELD_DEFECT_DETAIL_DENORM_TMP';
		pTableSchema := 'REP';
		pBatchDefectDetailView := '
								SELECT 
									T.WAFER_ID AS M_LASL_WAFER_ID, 
									T.WAFER_SECTION AS M_LASL_WAFER_SECTION_ID, 
									T.SBR_ID AS M_LASL_SBR_NO, 
									T.LOT_ID AS M_LH_LOT_ID, 
									T.M_LH_OLD_PRODUCT_NAME AS M_LH_OLD_PRODUCT_ID, 
									T.M_LH_OLD_FACILITY AS M_LH_OLD_FACILITY_LOCATION, 
									T.M_LH_OLD_ROUTE_NAME AS M_LH_OLD_ROUTE_NAME, 
									T.M_LH_OLD_OPERATION_NAME AS M_LH_OLD_OPERATION_NAME,
									T.OPERATION_NAME AS M_LH_OPERATION_NAME, 
									T.M_LH_OWNER AS M_LH_OWNER, 
									T.DEFECT_CODE, 
									CASE 
										WHEN (T.ROW_NUMBER_PER_WAFER_SECTION = 1) THEN T.M_LH_OLD_QUANTITY_ONHAND_SECTION_SUM ELSE "NUMERIC"(T.M_LH_OLD_QUANTITY_ONHAND) 
										END AS M_LH_OLD_QUANTITY_ONHAND, 
									CASE 
										WHEN (T.ROW_NUMBER_PER_WAFER_SECTION = 1) THEN T.M_LH_QUANTITY_ONHAND_SECTION_SUM ELSE "NUMERIC"(T.M_LH_QUANTITY_ONHAND) 
										END AS M_LH_QUANTITY_ONHAND, 
									CASE 
										WHEN (T.ROW_NUMBER_PER_WAFER_SECTION = 1) THEN T.M_DL_DEFECT_QTY_SECTION_SUM ELSE "NUMERIC"(T.DEFECT_QUANTITY) 
										END AS M_DL_DEFECT_QTY,
									T.M_LH_TRANSACTION_NAME AS M_LH_TRANSACTION_NAME, 
									T.M_LH_OPERATION_DATE AS M_LH_OPERATION_DATE_TIME, 
									T.TOOL_NAME AS M_LASL_MACHINE_NO, 
									T.COMMENTS AS M_LH_NEW_COMMENT, 
									T.OPERATION_NAME AS M_LASL_LINE_NO, 
									T.OPERATOR_ID AS M_LASL_OPERATOR_ID, 
									T.M_LH_PROGRAM_NAME AS PROGRAM, 
									T.M_LH_PRODUCT_NAME AS DEVICE_TYPE, 
									T.OLD_PRODUCT_TECHNOLOGY AS TECHNOLOGY, 
									T.OLD_PRODCUT_WAFER_TYPE AS WAFER_TYPE, 
									T.M_LH_OLD_PROGRAM_NAME AS PRODUCT_GROUP_02, 
									'''' AS PRODUCT_GROUP_03, 
									T.OLD_OPERATION_DESCRIPTION AS OLD_OPERATION_NAME_DESC, 
									T.OPERATION_DESCRIPTION AS NEW_OPERATION_NAME_DESC, 
									T.OLD_OPERATION_GROUP_01 AS OLD_OPERATION_GROUP_01, 
									T.OPERATION_GROUP_01 AS NEW_OPERATION_GROUP_01, 
									T.OLD_OPERATION_GROUP_02 AS OLD_OPERATION_GROUP_02, 
									T.OPERATION_GROUP_02 AS NEW_OPERATION_GROUP_02, 
									T.OLD_YIELD_GROUP AS OLD_OPERATION_YLD_GROUP, 
									T.YIELD_GROUP AS NEW_OPERATION_YLD_GROUP, 
									T.OLD_PROCESS_GROUP AS OLD_OPERATION_PROCESS_GROUP, 
									T.PROCESS_GROUP AS NEW_OPERATION_PROCESS_GROUP, 
									T.RULES_SITE_CODE, 
									T.RULES_RPTG_OPERATION_NAME, 
									T.SITE_CODE AS M_LH_SITE_CODE, 
									T.LOT_ID AS LOT_SK_ID, 
									T.M_LH_TRANSACTION_NAME AS M_LH_TRANSACTION_ID, 
									T.M_LH_OLD_PRODUCT_NAME AS M_LH_OLD_PRODUCT_SK_ID, 
									T.M_LH_OLD_OPERATION_NAME AS M_LH_OLD_OPERATION_SK_ID, 
									T.M_LH_OLD_OPERATION_KEY AS M_LH_OPERATION_SK_ID, 
									T.M_LH_OPERATION_DATE, 
									T.M_LH_OPERATION_YEAR, 
									T.M_LH_OPERATION_QUARTER, 
									T.M_LH_OPERATION_WEEK, 
									T.ROW_NUMBER_PER_WAFER_SECTION, 
									T.M_LH_OLD_QUANTITY_ONHAND AS M_LH_OLD_QUANTITY_ONHAND_RAW, 
									T.M_LH_QUANTITY_ONHAND AS M_LH_QUANTITY_ONHAND_RAW, 
									T.DEFECT_QUANTITY AS M_DL_DEFECT_QTY_RAW, 
									T.M_LH_OLD_QUANTITY_ONHAND_SECTION_SUM, 
									T.M_LH_QUANTITY_ONHAND_SECTION_SUM, 
									T.M_DL_DEFECT_QTY_SECTION_SUM,
									T.SITE_CODE,
									T.SITE_KEY,
									T.M_LH_OLD_PROGRAM_NAME
								FROM 
								(
									SELECT 
											DH.WAFER_ID,
											DH.WAFER_SECTION,
											DH.SBR_ID,
											DH.LOT_ID,
											DL.DEFECT_CODE,
											DL.DEFECT_QUANTITY,
											DL.M_LH_OWNER,
											DL.M_LH_OLD_PRODUCT_KEY,
											DL.M_LH_OLD_PRODUCT_NAME,
											DL.M_LH_OLD_FACILITY_KEY,
											DL.M_LH_OLD_FACILITY,
											DL.M_LH_OLD_ROUTE_KEY,
											DL.M_LH_OLD_ROUTE_NAME,
											DL.M_LH_OLD_OPERATION_KEY,
											DL.M_LH_OLD_OPERATION_NAME,
											DL.M_LH_OLD_PROGRAM_KEY,
											DL.M_LH_OLD_PROGRAM_NAME, 
											DL.M_LH_OPERATION_KEY, 
											DL.M_LH_OPERATION_NAME,
											DL.M_LH_PROGRAM_KEY,
											DL.M_LH_PROGRAM_NAME,
											DL.M_LH_PRODUCT_KEY, 
											DL.M_LH_PRODUCT_NAME, 
											DL.M_LH_OLD_QUANTITY_ONHAND,
											DL.M_LH_QUANTITY_ONHAND,
											DL.M_LH_TRANSACTION_NAME,
											DL.M_LH_OPERATION_DATE,
											DL.M_LH_OPERATION_YEAR,
											DL.M_LH_OPERATION_QUARTER,
											DL.M_LH_OPERATION_WEEK,
											DH.OPERATOR_ID, 
											DH.COMMENTS,
											DH.TOOL_KEY,
											DH.TOOL_NAME, -- MACHINE_NO
											DH.OPERATION_KEY,
											DH.OPERATION_NAME,  -- LINE_NO
											OLD_DP.TECHNOLOGY AS OLD_PRODUCT_TECHNOLOGY,
											DP.TECHNOLOGY AS PRODUCT_TECHNOLOGY,
											OLD_DP.WAFER_TYPE AS OLD_PRODCUT_WAFER_TYPE,
											DP.WAFER_TYPE AS PRODUCT_WAFER_TYPE,
											OLD_DO.OPERATION_DESCRIPTION AS OLD_OPERATION_DESCRIPTION,
											DOPER.OPERATION_DESCRIPTION AS OPERATION_DESCRIPTION,
											OLD_DO.OPERATION_GROUP_01 AS OLD_OPERATION_GROUP_01,
											DOPER.OPERATION_GROUP_01 AS OPERATION_GROUP_01,
											OLD_DO.OPERATION_GROUP_02 AS OLD_OPERATION_GROUP_02,
											DOPER.OPERATION_GROUP_02 AS OPERATION_GROUP_02,
											OLD_DO.YIELD_GROUP AS OLD_YIELD_GROUP,
											DOPER.YIELD_GROUP AS YIELD_GROUP,
											OLD_DO.PROCESS_GROUP AS OLD_PROCESS_GROUP,
											DOPER.PROCESS_GROUP AS PROCESS_GROUP,
											DL.SITE_KEY,
											DL.SITE_CODE,
											RULES.SITE_CODE AS RULES_SITE_CODE,
											RULES.OPERATION_NAME AS RULES_RPTG_OPERATION_NAME,
											CASE WHEN (( DH.WAFER_SECTION IS NULL ) OR (DH.WAFER_SECTION = DL.LOT_ID)) THEN ''0'':: INT8 
												ELSE ROW_NUMBER() OVER( 
																PARTITION BY RULES.LOT_HISTORY_SITE_CODE, DL.SITE_KEY, DH.WAFER_SECTION, DL.M_LH_OLD_PRODUCT_KEY, 
																DL.M_LH_OLD_ROUTE_KEY, DL.M_LH_OLD_OPERATION_KEY, DL.M_LH_OWNER, DL.DEFECT_CODE, DL.M_LH_OPERATION_KEY
																ORDER BY DL.M_LH_OPERATION_DATE DESC) END AS ROW_NUMBER_PER_WAFER_SECTION,
											SUM(DL.M_LH_OLD_QUANTITY_ONHAND) OVER(
																PARTITION BY RULES.LOT_HISTORY_SITE_CODE, DL.SITE_KEY, DH.WAFER_SECTION, DL.M_LH_OLD_PRODUCT_KEY, 
																DL.M_LH_OLD_ROUTE_KEY, DL.M_LH_OLD_OPERATION_KEY, DL.M_LH_OWNER, DL.DEFECT_CODE, DL.M_LH_OPERATION_KEY
																ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS M_LH_OLD_QUANTITY_ONHAND_SECTION_SUM,
											SUM(DL.M_LH_QUANTITY_ONHAND) OVER(
																PARTITION BY RULES.LOT_HISTORY_SITE_CODE, DL.SITE_KEY, DH.WAFER_SECTION, DL.M_LH_OLD_PRODUCT_KEY, 
																DL.M_LH_OLD_ROUTE_KEY, DL.M_LH_OLD_OPERATION_KEY, DL.M_LH_OWNER, DL.DEFECT_CODE, DL.M_LH_OPERATION_KEY
																ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS M_LH_QUANTITY_ONHAND_SECTION_SUM,
											SUM(DL.DEFECT_QUANTITY) OVER(
																PARTITION BY RULES.LOT_HISTORY_SITE_CODE, DL.SITE_KEY, DH.WAFER_SECTION, DL.M_LH_OLD_PRODUCT_KEY, 
																DL.M_LH_OLD_ROUTE_KEY, DL.M_LH_OLD_OPERATION_KEY, DL.M_LH_OWNER, DL.DEFECT_CODE, DL.M_LH_OPERATION_KEY
																ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS M_DL_DEFECT_QTY_SECTION_SUM,
											SUM(DH.QUANTITY_IN) OVER(
																PARTITION BY RULES.LOT_HISTORY_SITE_CODE, DL.SITE_KEY, DH.WAFER_SECTION, DL.M_LH_OLD_PRODUCT_KEY, 
																DL.M_LH_OLD_ROUTE_KEY, DL.M_LH_OLD_OPERATION_KEY, DL.M_LH_OWNER, DL.DEFECT_CODE, DL.M_LH_OPERATION_KEY
																ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS M_DH_QUANTITY_IN_SECTION_SUM,
											SUM(DH.QUANTITY_OUT) OVER(
																PARTITION BY RULES.LOT_HISTORY_SITE_CODE, DL.SITE_KEY, DH.WAFER_SECTION, DL.M_LH_OLD_PRODUCT_KEY, 
																DL.M_LH_OLD_ROUTE_KEY, DL.M_LH_OLD_OPERATION_KEY, DL.M_LH_OWNER, DL.DEFECT_CODE, DL.M_LH_OPERATION_KEY
																ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS M_DH_QUANTITY_OUT_SECTION_SUM,
											SUM(DH.DEFECT_QUANTITY) OVER(
																PARTITION BY RULES.LOT_HISTORY_SITE_CODE, DL.SITE_KEY, DH.WAFER_SECTION, DL.M_LH_OLD_PRODUCT_KEY, 
																DL.M_LH_OLD_ROUTE_KEY, DL.M_LH_OLD_OPERATION_KEY, DL.M_LH_OWNER, DL.DEFECT_CODE, DL.M_LH_OPERATION_KEY
																ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS M_DH_DEFECT_QTY_SECTION_SUM
									FROM REP.PSYIELD_DEFECT_LOG_DENORM DL
									LEFT JOIN 
										(	
											SELECT D.WAFER_ID, D.WAFER_SECTION, D.SBR_ID, D.LOT_ID,D.LOT_KEY, D.OPERATOR_ID,D.COMMENTS, 
												   D.TOOL_KEY, D.TOOL_NAME,D.OPERATION_KEY,D.OPERATION_NAME, D.SITE_KEY,
												   D.QUANTITY_IN, D.QUANTITY_OUT ,D.DEFECT_QUANTITY,
												   ROW_NUMBER() OVER(PARTITION BY D.SITE_KEY, D.LOT_KEY ORDER BY INSPECTION_DATE_TIME DESC) AS SEQU
											FROM ADS.VIEW_HIS_DEFECT_HEADER D 
										) DH ON DH.SITE_KEY = DL.SITE_KEY AND DH.LOT_KEY = DL.LOT_KEY AND DH.SEQU = 1
		
									LEFT JOIN ADS.VIEW_DIM_PRODUCT OLD_DP ON OLD_DP.SITE_KEY = DL.SITE_KEY AND OLD_DP.PRODUCT_KEY = DL.M_LH_OLD_PRODUCT_KEY
									LEFT JOIN ADS.VIEW_DIM_PRODUCT DP ON DP.SITE_KEY = DL.SITE_KEY AND DP.PRODUCT_KEY = DL.M_LH_PRODUCT_KEY
									LEFT JOIN ADS.VIEW_DIM_OPERATION OLD_DO ON OLD_DO.SITE_KEY = DL.SITE_KEY AND OLD_DO.OPERATION_KEY = DL.M_LH_OLD_OPERATION_KEY AND OLD_DO.FACILITY_KEY = DL.M_LH_OLD_FACILITY_KEY
									LEFT JOIN ADS.VIEW_DIM_OPERATION DOPER ON DOPER.SITE_KEY = DL.SITE_KEY AND DOPER.OPERATION_KEY = DL.M_LH_OPERATION_KEY AND DOPER.FACILITY_KEY = DL.M_LH_FACILITY_KEY

									JOIN (
											SELECT RO.SITE_CODE, RO.SITE_KEY, RO.OPERATION_NAME, 
													RO.LOT_HISTORY_SITE_CODE, RO.REPORT_OPERATION_NAME, 
													RO.RULE_NAME, RO.RULE_NAME_02, 
													RO.RULE_NAME_DEFECT, RO.INCLUDE_PN_SUFFIX_FLAG,
													CASE 
														WHEN (RO.YIELD_GROUP_ID = ''2A''::"VARCHAR") THEN RO.PROCESS_GROUP_ID ELSE RO.YIELD_GROUP_ID 
														END AS RPTG_PROCESS_GROUP_ID, 
													CASE 
														WHEN (RO.YIELD_GROUP_ID = ''2A''::"VARCHAR") THEN RO.PROCESS_GROUP ELSE RO.YIELD_GROUP 
														END AS RPTG_PROCESS_GROUP 
											FROM REP.PSYIELD_RULE_YIELD_OPERATION RO 
											WHERE (RO.YIELD_GROUP_ID IN ((''2A''::"VARCHAR")::VARCHAR(32), (''2B''::"VARCHAR")::VARCHAR(32), (''2C''::"VARCHAR")::VARCHAR(32)))
										) RULES ON  DL.SITE_CODE = RULES.LOT_HISTORY_SITE_CODE AND DL.M_LH_OLD_OPERATION_NAME = RULES.OPERATION_NAME
								WHERE
										DL.IS_TEST_LOT_ID_FLAG = ''N'' :: "VARCHAR"
									AND DL.M_LH_DELETED_FLAG = ''N'' ::"VARCHAR"
									AND DL.M_LH_GROUP_FLAG = ''N'' :: "VARCHAR"
									AND (
											   (RULES.INCLUDE_PN_SUFFIX_FLAG ISNULL) 
											OR (RULES.INCLUDE_PN_SUFFIX_FLAG = CASE WHEN ("SUBSTRING"(DL.M_LH_OLD_PROGRAM_NAME, (LENGTH(DL.M_LH_OLD_PROGRAM_NAME) - 1)) = ''PN''::"VARCHAR") THEN ''Y''::"VARCHAR" ELSE ''N''::"VARCHAR" END )
										)
									AND (
											(
												(RULES.RULE_NAME, DL.M_LH_OWNER) = ANY (
																						SELECT DISTINCT RO.RULE_NAME, RO."OWNER"
																						FROM REP.PSYIELD_RULE_YIELD_OWNER RO
																						WHERE RO.YIELD_TYPE IN ((''Prime''::"VARCHAR")::VARCHAR(32)) 
																							AND RO.DENOMINATOR_COUNT_LOSS = 1
																						)
												AND
												(RULES.RULE_NAME, DL.SITE_CODE, DL.M_LH_OLD_FACILITY) = ANY (
																							SELECT DISTINCT RF.RULE_NAME, RF.SITE_CODE, RF.FACILITY
																							FROM REP.PSYIELD_RULE_YIELD_FACILITY RF
																							WHERE RF.DENOMINATOR_COUNT_LOSS = 1
																							)
											)
											OR
											(
												(RULES.RULE_NAME_02, DL.M_LH_OWNER) = ANY (
																						SELECT DISTINCT RO.RULE_NAME, RO."OWNER"
																						FROM REP.PSYIELD_RULE_YIELD_OWNER RO
																						WHERE RO.YIELD_TYPE IN ((''Prime''::"VARCHAR")::VARCHAR(32)) 
																							AND RO.DENOMINATOR_COUNT_LOSS = 1
																						)
												AND
												(RULES.RULE_NAME_02, DL.SITE_CODE, DL.M_LH_OLD_FACILITY) = ANY (
																							SELECT DISTINCT RF.RULE_NAME, RF.SITE_CODE, RF.FACILITY
																							FROM REP.PSYIELD_RULE_YIELD_FACILITY RF
																							WHERE RF.DENOMINATOR_COUNT_LOSS = 1
																							)
											)
										)
								)T
								WHERE T.ROW_NUMBER_PER_WAFER_SECTION IN (''0''::INT8, ''1''::INT8)	
		';
		
		
		--	RAISE NOTICE 'pBatchDefectDetailView=%', pBatchDefectDetailView;
			
		SELECT CASE WHEN COUNT(1) >=1 THEN TRUE ELSE FALSE END INTO pExistFlag FROM _V_TABLE WHERE TABLENAME = pTableName AND SCHEMA = pTableSchema;
			
		IF pExistFlag  = TRUE THEN
			EXECUTE IMMEDIATE 'DROP TABLE ' || pTableSchema || '.'||pTableName;
			RAISE NOTICE 'Table %.% exist, deleted.', pTableSchema, pTableName;
		END IF;
		
		EXECUTE IMMEDIATE 'CREATE TABLE '|| pTableSchema || '.'||pTableName ||' AS SELECT * FROM ( ' || pBatchDefectDetailView || ' ) t DISTRIBUTE ON (SITE_CODE , M_LH_OLD_PROGRAM_NAME)';
		RAISE NOTICE 'create Table %.%', pTableSchema, pTableName;
		
	END;
END;
END_PROC;

